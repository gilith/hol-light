\DOC INT_EQ_CONV

\TYPE {INT_EQ_CONV : conv}

\SYNOPSIS
Conversion to prove whether one integer literal of type {:int} is equal to
another.

\DESCRIBE
The call {INT_EQ_CONV `c1 < c2`} where {c1} and {c2} are integer
literals of type {:int}, returns whichever of {|- c1 = c2 <=> T} or
{|- c1 = c2 <=> F} is true. By an integer literal we mean either {&n} or
{-- &n} where {n} is a numeral.

\FAILURE
Fails if applied to a term that is not an equality comparison on two permitted
integer literals of type {:int}.

\EXAMPLE
{
  # INT_EQ_CONV `&1 = &2`;;
  val it : thm = |- &1 = &2 <=> F

  # INT_EQ_CONV `-- &1 = -- &1`;;
  val it : thm = |- -- &1 = -- &1 <=> T
}

\COMMENTS
The related function {REAL_RAT_EQ_CONV} subsumes this functionality, also
applying to rational literals. Unless the restriction to integers is desired or
a tiny efficiency difference matters, it should be used in preference.

\SEEALSO
INT_REDUCE_CONV, REAL_RAT_EQ_CONV.

\ENDDOC
