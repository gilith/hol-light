\DOC >>

\TYPE {(>>) : ('a -> 'b * 'c) -> ('b -> 'd) -> 'a -> 'd * 'c}

\SYNOPSIS
Apply function to parser result.

\DESCRIBE
If {p} is a parser and {f} a function from the parse result type, {p >> f}
gives a new parser that `pipes the original parser output through f', i.e.
applies {f} to the result of the parse.

\FAILURE
Never fails.

\COMMENTS
This is one of a suite of combinators for manipulating ``parsers''. A parser is
simply a function whose OCaml type is some instance of
{:('a)list -> 'b * ('a)list}. The function should take a list of objects of
type {:'a} (e.g. characters or tokens), parse as much of it as possible from
left to right, and return a pair consisting of the object derived from parsing
(e.g. a term or a special syntax tree) and the list of elements that were not
processed.

\SEEALSO
++, |||, a, atleast, elistof, finished, fix, leftbin, listof, many, nothing,
possibly, rightbin, some.

\ENDDOC
