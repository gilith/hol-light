\DOC ISPEC

\TYPE {ISPEC : term -> thm -> thm}

\SYNOPSIS
Specializes a theorem, with type instantiation if necessary.

\KEYWORDS
rule, type.

\DESCRIBE
This rule specializes a quantified variable as does {SPEC}; it differs
from it in also instantiating the type if needed:
{
     A |- !x:ty.tm
  -----------------------  ISPEC `t:ty'`
      A |- tm[t/x]
}
\noindent (where {t} is free for {x} in {tm}, and {ty'} is an instance
of {ty}).

\FAILURE
{ISPEC} fails if the input theorem is not universally quantified, if
the type of the given term is not an instance of the type of the
quantified variable, or if the type variable is free in the
assumptions.

\EXAMPLE
{
  # ISPEC `0` EQ_REFL;;
  val it : thm = |- 0 = 0
}
\noindent Note that the corresponding call to {SPEC} would fail because of the
type mismatch:
{
  # SPEC `0` EQ_REFL;;
  Exception: Failure "SPEC".
}

\SEEALSO
INST, INST_TYPE, ISPECL, SPEC, type_match.

\ENDDOC
