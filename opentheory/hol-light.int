###############################################################################
# INTERPRETING HOL LIGHT NAMES INTO THE OPENTHEORY STANDARD NAMESPACE
###############################################################################

###############################################################################
# The HOL Light standard theory library.
###############################################################################

# Global

type "HOLLight.bool" as "bool"
type "HOLLight.fun" as "->"
type "HOLLight.ind" as "ind"
const "HOLLight.=" as "="
const "HOLLight.GEQ" as "="

# Data

# Data.Bool

const "HOLLight.!" as "Data.Bool.!"
const "HOLLight./\\" as "Data.Bool./\\"
const "HOLLight.==>" as "Data.Bool.==>"
const "HOLLight.?" as "Data.Bool.?"
const "HOLLight.?!" as "Data.Bool.?!"
const "HOLLight.\\/" as "Data.Bool.\\/"
const "HOLLight.~" as "Data.Bool.~"
const "HOLLight.COND" as "Data.Bool.cond"
const "HOLLight.F" as "Data.Bool.F"
const "HOLLight.LET" as "Data.Bool.let"
const "HOLLight.@" as "Data.Bool.select"
const "HOLLight.GABS" as "Data.Bool.select"
const "HOLLight.T" as "Data.Bool.T"

# Data.List

type "HOLLight.list" as "Data.List.list"

const "HOLLight.case_list" as "Data.List.case"
const "HOLLight.CONS" as "Data.List.::"
const "HOLLight.NIL" as "Data.List.[]"
const "HOLLight.APPEND" as "Data.List.@"
const "HOLLight.ALL" as "Data.List.all"
const "HOLLight.concat" as "Data.List.concat"
const "HOLLight.drop" as "Data.List.drop"
const "HOLLight.EX" as "Data.List.exists"
const "HOLLight.FILTER" as "Data.List.filter"
const "HOLLight.list_of_set" as "Data.List.fromSet"
const "HOLLight.HD" as "Data.List.head"
const "HOLLight.interval" as "Data.List.interval"
const "HOLLight.LAST" as "Data.List.last"
const "HOLLight.LENGTH" as "Data.List.length"
const "HOLLight.MAP" as "Data.List.map"
const "HOLLight.MEM" as "Data.List.member"
const "HOLLight.EL" as "Data.List.nth"
const "HOLLight.nub" as "Data.List.nub"
const "HOLLight.setify" as "Data.List.nubReverse"
const "HOLLight.NULL" as "Data.List.null"
const "HOLLight.REPLICATE" as "Data.List.replicate"
const "HOLLight.REVERSE" as "Data.List.reverse"
const "HOLLight.TL" as "Data.List.tail"
const "HOLLight.take" as "Data.List.take"
const "HOLLight.set_of_list" as "Data.List.toSet"
const "HOLLight.zipwith" as "Data.List.zipWith"

# Data.Option

type "HOLLight.option" as "Data.Option.option"

const "HOLLight.case_option" as "Data.Option.case"
const "HOLLight.is_none" as "Data.Option.isNone"
const "HOLLight.is_some" as "Data.Option.isSome"
const "HOLLight.NONE" as "Data.Option.none"
const "HOLLight.SOME" as "Data.Option.some"

# Data.Pair

type "HOLLight.prod" as "Data.Pair.*"

const "HOLLight.," as "Data.Pair.,"
const "HOLLight.FST" as "Data.Pair.fst"
const "HOLLight.SND" as "Data.Pair.snd"

# Data.Sum

type "HOLLight.sum" as "Data.Sum.+"

const "HOLLight.OUTL" as "Data.Sum.destLeft"
const "HOLLight.OUTR" as "Data.Sum.destRight"
const "HOLLight.INL" as "Data.Sum.left"
const "HOLLight.INR" as "Data.Sum.right"

# Data.Unit

type "HOLLight.1" as "Data.Unit.unit"

const "HOLLight.one" as "Data.Unit.()"

# Function

const "HOLLight.I" as "Function.id"
const "HOLLight.o" as "Function.o"
const "HOLLight.ONE_ONE" as "Function.injective"
const "HOLLight.ONTO" as "Function.surjective"

# Number

# Number.Natural

type "HOLLight.num" as "Number.Natural.natural"

const "HOLLight.+" as "Number.Natural.+"
const "HOLLight.-" as "Number.Natural.-"
const "HOLLight.*" as "Number.Natural.*"
const "HOLLight.<" as "Number.Natural.<"
const "HOLLight.<=" as "Number.Natural.<="
const "HOLLight.>=" as "Number.Natural.>="
const "HOLLight.>" as "Number.Natural.>"
const "HOLLight.dist" as "Number.Natural.distance"
const "HOLLight.DIV" as "Number.Natural.div"
const "HOLLight.EVEN" as "Number.Natural.even"
const "HOLLight.EXP" as "Number.Natural.exp"
const "HOLLight.FACT" as "Number.Natural.factorial"
const "HOLLight.MAX" as "Number.Natural.max"
const "HOLLight.MIN" as "Number.Natural.min"
const "HOLLight.minimal" as "Number.Natural.minimal"
const "HOLLight.MOD" as "Number.Natural.mod"
const "HOLLight.ODD" as "Number.Natural.odd"
const "HOLLight.PRE" as "Number.Natural.pre"
const "HOLLight.SUC" as "Number.Natural.suc"

# Number.Numeral

const "HOLLight.BIT0" as "Number.Numeral.bit0"
const "HOLLight.BIT1" as "Number.Numeral.bit1"
const "HOLLight._0" as "Number.Numeral.zero"

# Number.Real

type "HOLLight.real" as "Number.Real.real"

const "HOLLight.real_add" as "Number.Real.+"
const "HOLLight.real_sub" as "Number.Real.-"
const "HOLLight.real_mul" as "Number.Real.*"
const "HOLLight.real_lt" as "Number.Real.<"
const "HOLLight.real_le" as "Number.Real.<="
const "HOLLight.real_ge" as "Number.Real.>="
const "HOLLight.real_gt" as "Number.Real.>"
const "HOLLight.real_div" as "Number.Real./"
const "HOLLight.real_neg" as "Number.Real.~"
const "HOLLight.real_abs" as "Number.Real.abs"
const "HOLLight.real_pow" as "Number.Real.exp"
const "HOLLight.real_of_num" as "Number.Real.fromNatural"
const "HOLLight.real_inv" as "Number.Real.inv"
const "HOLLight.real_max" as "Number.Real.max"
const "HOLLight.real_min" as "Number.Real.min"
const "HOLLight.sup" as "Number.Real.sup"

# Set

type "HOLLight.set" as "Set.set"

const "HOLLight.DIFF" as "Set.-"
const "HOLLight.BIJ" as "Set.bijections"
const "HOLLight.CARD" as "Set.size"
const "HOLLight.CHOICE" as "Set.choice"
const "HOLLight.CROSS" as "Set.cross"
const "HOLLight.DELETE" as "Set.delete"
const "HOLLight.DISJOINT" as "Set.disjoint"
const "HOLLight.EMPTY" as "Set.{}"
const "HOLLight.FINITE" as "Set.finite"
const "HOLLight.GSPEC" as "Set.fromPredicate"
const "HOLLight.HAS_SIZE" as "Set.hasSize"
const "HOLLight.IMAGE" as "Set.image"
const "HOLLight.IN" as "Set.in"
const "HOLLight.INFINITE" as "Set.infinite"
const "HOLLight.INJ" as "Set.injections"
const "HOLLight.INSERT" as "Set.insert"
const "HOLLight.INTER" as "Set.intersect"
const "HOLLight.INTERS" as "Set.bigIntersect"
const "HOLLight.ITSET" as "Set.fold"
const "HOLLight.PSUBSET" as "Set.properSubset"
const "HOLLight.REST" as "Set.rest"
const "HOLLight.SING" as "Set.singleton"
const "HOLLight.SUBSET" as "Set.subset"
const "HOLLight.SURJ" as "Set.surjections"
const "HOLLight.UNION" as "Set.union"
const "HOLLight.UNIONS" as "Set.bigUnion"
const "HOLLight.UNIV" as "Set.universe"

# Relation

const "HOLLight.WF" as "Relation.wellFounded"
const "HOLLight.MEASURE" as "Relation.measure"

# Unwanted

const "HOLLight.LET_END" as "Unwanted.id"
const "HOLLight.NUMERAL" as "Unwanted.id"

###############################################################################
# The HOL Light example theories.
###############################################################################

# Data

# Data.Byte

type "HOLLight.byte" as "Data.Byte.byte"

const "HOLLight.byte_add" as "Data.Byte.+"
const "HOLLight.byte_le" as "Data.Byte.<="
const "HOLLight.byte_lt" as "Data.Byte.<"
const "HOLLight.byte_neg" as "Data.Byte.~"
const "HOLLight.byte_mult" as "Data.Byte.*"
const "HOLLight.byte_sub" as "Data.Byte.-"
const "HOLLight.byte_and" as "Data.Byte.and"
const "HOLLight.byte_bit" as "Data.Byte.bit"
const "HOLLight.num_to_byte" as "Data.Byte.fromNatural"
const "HOLLight.byte_size" as "Data.Byte.modulus"
const "HOLLight.byte_not" as "Data.Byte.not"
const "HOLLight.byte_or" as "Data.Byte.or"
const "HOLLight.byte_shl" as "Data.Byte.shiftLeft"
const "HOLLight.byte_shr" as "Data.Byte.shiftRight"
const "HOLLight.byte_to_num" as "Data.Byte.toNatural"
const "HOLLight.byte_width" as "Data.Byte.width"

# Data.Byte.Bits

const "HOLLight.byte_bits_lte" as "Data.Byte.Bits.compare"
const "HOLLight.byte_to_list" as "Data.Byte.Bits.fromWord"
const "HOLLight.is_byte_list" as "Data.Byte.Bits.normal"
const "HOLLight.list_to_byte" as "Data.Byte.Bits.toWord"

# Data.Char

type "HOLLight.unicode" as "Data.Char.char"
type "HOLLight.plane" as "Data.Char.plane"
type "HOLLight.position" as "Data.Char.position"

const "HOLLight.dest_plane" as "Data.Char.destPlane"
const "HOLLight.dest_position" as "Data.Char.destPosition"
const "HOLLight.dest_unicode" as "Data.Char.destChar"
const "HOLLight.is_plane" as "Data.Char.isPlane"
const "HOLLight.is_position" as "Data.Char.isPosition"
const "HOLLight.is_unicode" as "Data.Char.isChar"
const "HOLLight.mk_plane" as "Data.Char.mkPlane"
const "HOLLight.mk_position" as "Data.Char.mkPosition"
const "HOLLight.mk_unicode" as "Data.Char.mkChar"

# Data.Char.UTF8

const "HOLLight.decode" as "Data.Char.UTF8.decode"
const "HOLLight.decode_stream" as "Data.Char.UTF8.decodeStream"
const "HOLLight.decoder" as "Data.Char.UTF8.decoder"
const "HOLLight.decode_cont1" as "Data.Char.UTF8.decoder.decode1"
const "HOLLight.decode_cont2" as "Data.Char.UTF8.decoder.decode2"
const "HOLLight.decode_cont3" as "Data.Char.UTF8.decoder.decode3"
const "HOLLight.decoder_parse" as "Data.Char.UTF8.decoder.parse"
const "HOLLight.encode" as "Data.Char.UTF8.encode"
const "HOLLight.encoder" as "Data.Char.UTF8.encoder"
const "HOLLight.encode_cont1" as "Data.Char.UTF8.encoder.encode1"
const "HOLLight.encode_cont2" as "Data.Char.UTF8.encoder.encode2"
const "HOLLight.encode_cont3" as "Data.Char.UTF8.encoder.encode3"
const "HOLLight.is_cont" as "Data.Char.UTF8.isContinuationByte"
const "HOLLight.parse_cont" as "Data.Char.UTF8.parseContinuationByte"
const "HOLLight.parse_cont2" as "Data.Char.UTF8.parseTwoContinuationBytes"
const "HOLLight.parse_cont3" as "Data.Char.UTF8.parseThreeContinuationBytes"

# Data.Word

type "HOLLight.word" as "Data.Word.word"

const "HOLLight.word_add" as "Data.Word.+"
const "HOLLight.word_le" as "Data.Word.<="
const "HOLLight.word_lt" as "Data.Word.<"
const "HOLLight.word_neg" as "Data.Word.~"
const "HOLLight.word_mult" as "Data.Word.*"
const "HOLLight.word_sub" as "Data.Word.-"
const "HOLLight.word_and" as "Data.Word.and"
const "HOLLight.word_bit" as "Data.Word.bit"
const "HOLLight.num_to_word" as "Data.Word.fromNatural"
const "HOLLight.word_size" as "Data.Word.modulus"
const "HOLLight.word_not" as "Data.Word.not"
const "HOLLight.word_or" as "Data.Word.or"
const "HOLLight.word_shl" as "Data.Word.shiftLeft"
const "HOLLight.word_shr" as "Data.Word.shiftRight"
const "HOLLight.word_to_num" as "Data.Word.toNatural"
const "HOLLight.word_width" as "Data.Word.width"

# Data.Word.Bits

const "HOLLight.word_bits_lte" as "Data.Word.Bits.compare"
const "HOLLight.word_to_list" as "Data.Word.Bits.fromWord"
const "HOLLight.is_word_list" as "Data.Word.Bits.normal"
const "HOLLight.list_to_word" as "Data.Word.Bits.toWord"

# Data.Word10

type "HOLLight.word10" as "Data.Word10.word10"

const "HOLLight.word10_add" as "Data.Word10.+"
const "HOLLight.word10_le" as "Data.Word10.<="
const "HOLLight.word10_lt" as "Data.Word10.<"
const "HOLLight.word10_neg" as "Data.Word10.~"
const "HOLLight.word10_mult" as "Data.Word10.*"
const "HOLLight.word10_sub" as "Data.Word10.-"
const "HOLLight.word10_and" as "Data.Word10.and"
const "HOLLight.word10_bit" as "Data.Word10.bit"
const "HOLLight.num_to_word10" as "Data.Word10.fromNatural"
const "HOLLight.word10_size" as "Data.Word10.modulus"
const "HOLLight.word10_not" as "Data.Word10.not"
const "HOLLight.word10_or" as "Data.Word10.or"
const "HOLLight.word10_shl" as "Data.Word10.shiftLeft"
const "HOLLight.word10_shr" as "Data.Word10.shiftRight"
const "HOLLight.word10_to_num" as "Data.Word10.toNatural"
const "HOLLight.word10_width" as "Data.Word10.width"

# Data.Word10.Bits

const "HOLLight.word10_bits_lte" as "Data.Word10.Bits.compare"
const "HOLLight.word10_to_list" as "Data.Word10.Bits.fromWord"
const "HOLLight.is_word10_list" as "Data.Word10.Bits.normal"
const "HOLLight.list_to_word10" as "Data.Word10.Bits.toWord"

# Data.Word12

type "HOLLight.word12" as "Data.Word12.word12"

const "HOLLight.word12_add" as "Data.Word12.+"
const "HOLLight.word12_le" as "Data.Word12.<="
const "HOLLight.word12_lt" as "Data.Word12.<"
const "HOLLight.word12_neg" as "Data.Word12.~"
const "HOLLight.word12_mult" as "Data.Word12.*"
const "HOLLight.word12_sub" as "Data.Word12.-"
const "HOLLight.word12_and" as "Data.Word12.and"
const "HOLLight.word12_bit" as "Data.Word12.bit"
const "HOLLight.num_to_word12" as "Data.Word12.fromNatural"
const "HOLLight.word12_size" as "Data.Word12.modulus"
const "HOLLight.word12_not" as "Data.Word12.not"
const "HOLLight.word12_or" as "Data.Word12.or"
const "HOLLight.word12_shl" as "Data.Word12.shiftLeft"
const "HOLLight.word12_shr" as "Data.Word12.shiftRight"
const "HOLLight.word12_to_num" as "Data.Word12.toNatural"
const "HOLLight.word12_width" as "Data.Word12.width"

# Data.Word12.Bits

const "HOLLight.word12_bits_lte" as "Data.Word12.Bits.compare"
const "HOLLight.word12_to_list" as "Data.Word12.Bits.fromWord"
const "HOLLight.is_word12_list" as "Data.Word12.Bits.normal"
const "HOLLight.list_to_word12" as "Data.Word12.Bits.toWord"

# Data.Word16

type "HOLLight.word16" as "Data.Word16.word16"

const "HOLLight.word16_add" as "Data.Word16.+"
const "HOLLight.word16_le" as "Data.Word16.<="
const "HOLLight.word16_lt" as "Data.Word16.<"
const "HOLLight.word16_neg" as "Data.Word16.~"
const "HOLLight.word16_mult" as "Data.Word16.*"
const "HOLLight.word16_sub" as "Data.Word16.-"
const "HOLLight.word16_and" as "Data.Word16.and"
const "HOLLight.word16_bit" as "Data.Word16.bit"
const "HOLLight.bytes_to_word16" as "Data.Word16.fromBytes"
const "HOLLight.num_to_word16" as "Data.Word16.fromNatural"
const "HOLLight.word16_size" as "Data.Word16.modulus"
const "HOLLight.word16_not" as "Data.Word16.not"
const "HOLLight.word16_or" as "Data.Word16.or"
const "HOLLight.word16_shl" as "Data.Word16.shiftLeft"
const "HOLLight.word16_shr" as "Data.Word16.shiftRight"
const "HOLLight.word16_to_bytes" as "Data.Word16.toBytes"
const "HOLLight.word16_to_num" as "Data.Word16.toNatural"
const "HOLLight.word16_width" as "Data.Word16.width"

# Data.Word16.Bits

const "HOLLight.word16_bits_lte" as "Data.Word16.Bits.compare"
const "HOLLight.word16_to_list" as "Data.Word16.Bits.fromWord"
const "HOLLight.is_word16_list" as "Data.Word16.Bits.normal"
const "HOLLight.list_to_word16" as "Data.Word16.Bits.toWord"

# Number

# Number.Modular

type "HOLLight.modular" as "Number.Modular.modular"

const "HOLLight.modular_add" as "Number.Modular.+"
const "HOLLight.modular_le" as "Number.Modular.<="
const "HOLLight.modular_lt" as "Number.Modular.<"
const "HOLLight.modular_neg" as "Number.Modular.~"
const "HOLLight.modular_mult" as "Number.Modular.*"
const "HOLLight.modular_sub" as "Number.Modular.-"
const "HOLLight.modular_equiv" as "Number.Modular.equivalent"
const "HOLLight.num_to_modular" as "Number.Modular.fromNatural"
const "HOLLight.modulus" as "Number.Modular.modulus"
const "HOLLight.modular_to_num" as "Number.Modular.toNatural"

# Parser

type "HOLLight.parser" as "Parser.parser"

const "HOLLight.dest_parser" as "Parser.destParser"
const "HOLLight.parse_inverse" as "Parser.inverse"
const "HOLLight.is_parser" as "Parser.isParser"
const "HOLLight.parse_map" as "Parser.map"
const "HOLLight.mk_parser" as "Parser.mkParser"
const "HOLLight.parse" as "Parser.parse"
const "HOLLight.parse_all" as "Parser.parseAll"
const "HOLLight.parser_all" as "Parser.parseAll.pa"
const "HOLLight.parse_none" as "Parser.parseNone"
const "HOLLight.parser_none" as "Parser.parseNone.pn"
const "HOLLight.parse_option" as "Parser.parseOption"
const "HOLLight.parse_pair" as "Parser.parsePair"
const "HOLLight.parser_pair" as "Parser.parsePair.pbc"
const "HOLLight.parse_some" as "Parser.parseSome"
const "HOLLight.parse_stream" as "Parser.parseStream"
const "HOLLight.parse_partial_map" as "Parser.partialMap"
const "HOLLight.parser_partial_map" as "Parser.partialMap.pf"
const "HOLLight.parse_strong_inverse" as "Parser.strongInverse"

# Parser.Stream

type "HOLLight.stream" as "Parser.Stream.stream"

const "HOLLight.append_stream" as "Parser.Stream.append"
const "HOLLight.case_stream" as "Parser.Stream.case"
const "HOLLight.Eof" as "Parser.Stream.eof"
const "HOLLight.Error" as "Parser.Stream.error"
const "HOLLight.list_to_stream" as "Parser.Stream.fromList"
const "HOLLight.is_proper_suffix_stream" as "Parser.Stream.isProperSuffix"
const "HOLLight.is_suffix_stream" as "Parser.Stream.isSuffix"
const "HOLLight.length_stream" as "Parser.Stream.length"
const "HOLLight.Stream" as "Parser.Stream.stream"
const "HOLLight.stream_to_list" as "Parser.Stream.toList"

###############################################################################
# The HOL Light Haskell theories.
###############################################################################
