#!/bin/bash

opentheory=../opentheory

adir=$opentheory/test/articles/hol-light
if ! test -d $adir ; then echo "$adir not a directory" ; exit 1 ; fi

prog=$opentheory/bin/mlton/opentheory
if ! test -x $prog ; then echo "$prog not an executable" ; exit 1 ; fi

theories=$opentheory/data/theories/hol-light
if ! test -d $theories ; then echo "$theories not a directory" ; exit 1 ; fi

rm -f opentheory/articles/*.art
rm -f opentheory/articles/*.sum
rm -f opentheory/articles/*.thy

log=opentheory/log
echo '#use "hol.ml";;' | ocaml &> $log
if grep '^Exception:\|^Error:\|^Error in included file' $log
then
    cat $log
    exit 1
fi

art=opentheory/articles/bool-def-true.art
if test -r $art ; then cp -v $art $adir ; fi

art=opentheory/articles/bool-int-true.art
if test -r $art ; then cp -v $art $adir ; fi

art=opentheory/articles/bool-true-aux.art
if test -r $art ; then cp -v $art $adir ; fi

for thy in $(ls opentheory/articles/*-aux.thy)
do
    base=$(basename $thy .thy)

    art=opentheory/articles/$base.art
    sum=opentheory/articles/$base.sum
    cart=opentheory/articles/foo.art

    echo "compressing" $art

    $prog info --preserve-theory --summary -o $sum --article -o $cart $thy || exit 1

    if grep 'Unwanted' $cart ; then exit 1 ; fi

    mv $cart $art || exit 1

    echo
done

rm -f opentheory/articles/*-aux.thy

thys=$(if test -e opentheory/articles/hol-light.thy ; then (echo opentheory/articles/hol-light.thy ; (ls opentheory/articles/*.thy | grep -v hol-light.thy)) ; else ls opentheory/articles/*.thy ; fi)
# echo $thys

for thy in $thys
do
    base=$(basename $thy .thy)
    sum=opentheory/articles/$base.sum
    tdir=$theories/$base
    tthy=$tdir/$base.thy
    tart=$tdir/$base.art

    if ! test -d $tdir
    then
        echo "making new" $base "theory directory"
        mkdir $tdir

        echo "name: $base" > $tthy
        echo "version: 1.0" >> $tthy
        echo -n "description: HOL Light theory segment extracted on " >> $tthy
        date "+%Y-%m-%d" >> $tthy
        echo "author: Joe Hurd <joe@gilith.com>" >> $tthy
        echo "license: HOLLight" >> $tthy
        echo "show: \"Data.Bool\"" >> $tthy
        if (echo $base | grep '^list-' > /dev/null)
        then
            echo "show: \"Data.List\"" >> $tthy
        fi
        if (echo $base | grep '^option-' > /dev/null)
        then
            echo "show: \"Data.Option\"" >> $tthy
        fi
        if (echo $base | grep '^pair-' > /dev/null)
        then
            echo "show: \"Data.Pair\"" >> $tthy
        fi
        if (echo $base | grep '^sum-' > /dev/null)
        then
            echo "show: \"Data.Sum\"" >> $tthy
        fi
        if (echo $base | grep '^unit-' > /dev/null)
        then
            echo "show: \"Data.Unit\"" >> $tthy
        fi
        if (echo $base | grep '^function-' > /dev/null)
        then
            echo "show: \"Function\"" >> $tthy
        fi
        if (echo $base | grep '^natural-' > /dev/null)
        then
            echo "show: \"Number.Natural\"" >> $tthy
        fi
        if (echo $base | grep '^natural-' > /dev/null)
        then
            echo "show: \"Number.Numeral\"" >> $tthy
        fi
        if (echo $base | grep '^relation-' > /dev/null)
        then
            echo "show: \"Relation\"" >> $tthy
        fi
        echo >> $tthy
        echo "main {" >> $tthy
        echo "  article: \"$base.art\"" >> $tthy
        echo "}" >> $tthy
    fi

    echo "compiling" $base

    $prog info --preserve-theory --summary -o $sum --article -o $tart $thy || exit 1

    if grep 'Unwanted' $tart ; then exit 1 ; fi

    echo "installing" $base

    $prog install --manual --reinstall --auto-uninstall $tthy || exit 1

    echo
done

hart=$theories/bool-def-true/bool-def-true.art
if test -r $hart
then
    tart=$opentheory/data/theories/bool-def-true/bool-def-true.art
    if test $hart -nt $tart ; then cp -v $hart $tart ; fi
fi

hart=$theories/bool-int-true/bool-int-true.art
if test -r $hart
then
    tart=$opentheory/data/theories/bool-int-true/bool-int-true.art
    if test $hart -nt $tart ; then cp -v $hart $tart ; fi
fi

echo
